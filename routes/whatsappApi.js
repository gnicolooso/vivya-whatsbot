// routes/whatsappApi.js

const express = require('express');
const { MessageMedia } = require('whatsapp-web.js'); // Necess√°rio para MessageMedia.fromUrl
const { getWhatsAppClient, isConnected, startWhatsAppClient, resetWhatsAppSession } = require('../whatsapp/client');
const { QR_SERVICE_URL } = require('../config');

/**
 * @file Define os endpoints da API para intera√ß√£o com o bot do WhatsApp.
 * Gerencia o envio de mensagens, controle de estado do chat e a√ß√µes de sess√£o.
 */

const router = express.Router();

/** 
 * Middleware para verificar se o bot est√° conectado antes de processar requisi√ß√µes que dependem dele.
 * @param {object} req - Objeto de requisi√ß√£o do Express.
 * @param {object} res - Objeto de resposta do Express.
 * @param {function} next - Fun√ß√£o para passar para o pr√≥ximo middleware.
 */
function checkBotConnection(req, res, next) {
    if (!isConnected()) {
        console.warn(`‚ö†Ô∏è Tentativa de ${req.path}, mas o bot n√£o est√° conectado.`);
        return res.status(500).json({ error: 'Bot n√£o est√° conectado ao WhatsApp. Tente novamente mais tarde.' });
    }
    next(); // Procede para o pr√≥ximo handler se conectado
}

// --- Endpoints HTTP do Bot ---

/**
 * Endpoint para reset manual da sess√£o.
 * Este endpoint ir√° destruir a sess√£o atual e apagar seus arquivos,
 * for√ßando o bot a gerar um novo QR Code na pr√≥xima inicializa√ß√£o.
 * POST /reset-session
 */
router.post('/reset-session', async (req, res) => {
    console.log('üîÑ Requisi√ß√£o de reset de sess√£o recebida no bot.');
    try {
        await resetWhatsAppSession(); // Chama a fun√ß√£o que resetar√° a sess√£o

        // 4. Enviar a resposta de sucesso
        res.status(200).json({ message: 'Sess√£o do bot resetada e arquivos removidos. O bot tentar√° se reconectar e gerar√° um novo QR Code.' });
        console.log('‚úÖ Resposta de reset enviada.');

        // 5. Iniciar o cliente NOVAMENTE para for√ßar um novo QR Code.
        // Pequeno atraso para garantir que a resposta HTTP foi enviada
        setTimeout(() => {
            console.log('üöÄ Iniciando novamente o cliente WhatsApp Web para gerar novo QR.');
            startWhatsAppClient(); // Chama a fun√ß√£o que inicializa o client
        }, 1000);

    } catch (err) {
        console.error('‚ùå Erro inesperado ao resetar sess√£o manualmente:', err);
        if (!res.headersSent) {
            res.status(500).json({ error: 'Erro interno ao tentar resetar sess√£o.', details: err.message });
        }
    }
});

/**
 * Endpoint para o microservi√ßo solicitar um QR Code.
 * √ötil para sincroniza√ß√£o na inicializa√ß√£o ou ap√≥s falhas.
 * POST /api/request-qr
 */
router.post('/api/request-qr', async (req, res) => {
    console.log('üîÑ Solicita√ß√£o de QR code recebida do microservi√ßo.');
    const client = getWhatsAppClient(); // Obt√©m a inst√¢ncia do cliente
    // Se o cliente n√£o estiver conectado ou estiver inicializando, force uma nova inicializa√ß√£o
    if (!client || !client.info || client.info.status !== 'CONNECTED') {
        console.log('Bot n√£o conectado ou inicializado. For√ßando inicializa√ß√£o para gerar QR.');
        startWhatsAppClient(); // Tenta iniciar/re-inicializar o cliente
        res.status(200).send('Bot instru√≠do a iniciar/gerar QR.');
    } else {
        console.log('Bot j√° conectado, n√£o √© necess√°rio gerar QR.');
        res.status(200).send('Bot j√° conectado.');
    }
});

// --- Endpoints para Controle de Estado do Chat (Digitando/Gravando/Limpar) ---

/**
 * Endpoint para definir o estado de "digitando" para um contato/chat.
 * POST /api/set-typing-state
 * @param {string} to - O ID do chat (ex: '55119XXXXXXXX@c.us').
 */
router.post('/api/set-typing-state', checkBotConnection, async (req, res) => {
    const { to } = req.body;
    if (!to) return res.status(400).json({ error: 'Par√¢metro "to" √© obrigat√≥rio.' });

    const client = getWhatsAppClient();
    try {
        const chat = await client.getChatById(to);
        if (chat) {
            await chat.sendStateTyping();
            console.log(`üí¨ Definido estado 'digitando' para: ${to}`);
            res.status(200).json({ success: true, message: 'Estado de digita√ß√£o definido.' });
        } else {
            console.warn(`‚ö†Ô∏è Chat n√£o encontrado para o ID: ${to}. N√£o foi poss√≠vel definir o estado de digita√ß√£o.`);
            res.status(404).json({ success: false, error: 'Chat n√£o encontrado.' });
        }
    } catch (error) {
        console.error(`‚ùå Erro ao definir estado 'digitando' para ${to}:`, error.message);
        res.status(500).json({ success: false, error: 'Falha ao definir estado de digita√ß√£o.', details: error.message });
    }
});

/**
 * Endpoint para definir o estado de "gravando √°udio" para um contato/chat.
 * POST /api/set-recording-state
 * @param {string} to - O ID do chat (ex: '55119XXXXXXXX@c.us').
 */
router.post('/api/set-recording-state', checkBotConnection, async (req, res) => {
    const { to } = req.body;
    if (!to) return res.status(400).json({ error: 'Par√¢metro "to" √© obrigat√≥rio.' });

    const client = getWhatsAppClient();
    try {
        const chat = await client.getChatById(to);
        if (chat) {
            await chat.sendStateRecording();
            console.log(`üé§ Definido estado 'gravando' para: ${to}`);
            res.status(200).json({ success: true, message: 'Estado de grava√ß√£o definido.' });
        } else {
            console.warn(`‚ö†Ô∏è Chat n√£o encontrado para o ID: ${to}. N√£o foi poss√≠vel definir o estado de grava√ß√£o.`);
            res.status(404).json({ success: false, error: 'Chat n√£o encontrado.' });
        }
    } catch (error) {
        console.error(`‚ùå Erro ao definir estado 'gravando' para ${to}:`, error.message);
        res.status(500).json({ success: false, error: 'Falha ao definir estado de grava√ß√£o.', details: error.message });
    }
});

/**
 * Endpoint para limpar o estado de "digitando" ou "gravando" para um contato/chat.
 * POST /api/clear-chat-state
 * @param {string} to - O ID do chat (ex: '55119XXXXXXXX@c.us').
 */
router.post('/api/clear-chat-state', checkBotConnection, async (req, res) => {
    const { to } = req.body;
    if (!to) return res.status(400).json({ error: 'Par√¢metro "to" √© obrigat√≥rio.' });

    const client = getWhatsAppClient();
    try {
        const chat = await client.getChatById(to);
        if (chat) {
            await chat.clearState();
            console.log(`‚ùå Estado de chat limpo para: ${to}`);
            res.status(200).json({ success: true, message: 'Estado de chat limpo.' });
        } else {
            console.warn(`‚ö†Ô∏è Chat n√£o encontrado para o ID: ${to}. N√£o foi poss√≠vel limpar o estado do chat.`);
            res.status(404).json({ success: false, error: 'Chat n√£o encontrado.' });
        }
    } catch (error) {
        console.error(`‚ùå Erro ao limpar estado de chat para ${to}:`, error.message);
        res.status(500).json({ success: false, error: 'Falha ao limpar estado de chat.', details: error.message });
    }
});

/**
 * Endpoint para enviar mensagens de WhatsApp (texto ou m√≠dia).
 * POST /api/send-whatsapp-message
 * @param {string} to - O n√∫mero de destino (ex: '55119XXXXXXXX@c.us').
 * @param {string} [message] - O texto da mensagem (obrigat√≥rio se n√£o houver m√≠dia).
 * @param {string} [mediaType] - Tipo da m√≠dia (image, video, document, audio, ptt).
 * @param {string} [mediaUrl] - URL da m√≠dia a ser enviada (obrigat√≥rio se houver m√≠dia).
 * @param {string} [caption] - Legenda para a m√≠dia.
 * @param {string} [filename] - Nome do arquivo para documentos.
 */
router.post('/api/send-whatsapp-message', checkBotConnection, async (req, res) => {
    const { to, message, mediaType, mediaUrl, caption, filename } = req.body;

    if (!to) {
        return res.status(400).json({ error: 'Par√¢metro "to" √© obrigat√≥rio.' });
    }
    // Verifica se pelo menos uma mensagem de texto ou m√≠dia foi fornecida
    if (!message && (!mediaType || !mediaUrl)) {
        return res.status(400).json({ error: 'Nenhuma mensagem de texto ou m√≠dia fornecida para enviar.' });
    }

    const client = getWhatsAppClient();
    try {
        if (mediaType && mediaUrl) {
            // Valida√ß√£o b√°sica da URL para mitigar SSRF (Server-Side Request Forgery)
            // Em um ambiente de produ√ß√£o, considere uma valida√ß√£o mais robusta e uma lista de permiss√µes.
            if (!mediaUrl.startsWith('http://') && !mediaUrl.startsWith('https://')) {
                return res.status(400).json({ error: 'URL de m√≠dia inv√°lida. Deve come√ßar com http:// ou https://' });
            }

            const media = await MessageMedia.fromUrl(mediaUrl);
            let options = {};
            if (caption) options.caption = caption;
            if (filename) options.filename = filename;

            switch (mediaType) {
                case 'image':
                case 'video':
                case 'document':
                    await client.sendMessage(to, media, options);
                    console.log(`‚úÖ ${mediaType} enviado para ${to} da URL: ${mediaUrl}`);
                    break;
                case 'audio':
                case 'ptt':
                    options.sendAudioAsVoice = true; // Envia √°udio como grava√ß√£o de voz
                    await client.sendMessage(to, media, options);
                    console.log(`‚úÖ √Åudio (PTT) enviado para ${to} da URL: ${mediaUrl}`);
                    break;
                default:
                    console.warn(`‚ö†Ô∏è Tipo de m√≠dia desconhecido: ${mediaType}. Tentando enviar como mensagem de texto.`);
                    if (message) {
                        await client.sendMessage(to, message);
                        console.log(`‚úÖ Mensagem de texto enviada para ${to}: ${message}`);
                    } else {
                        // Se o tipo de m√≠dia √© desconhecido e n√£o h√° mensagem de texto, retorna erro.
                        return res.status(400).json({ error: 'Tipo de m√≠dia n√£o suportado e nenhuma mensagem de texto fornecida.' });
                    }
            }
        } else if (message) {
            // Envio de mensagem de texto simples
            await client.sendMessage(to, message);
            console.log(`‚úÖ Mensagem de texto enviada para ${to}: ${message}`);
        }

        res.status(200).json({ success: true, message: 'Mensagem enviada com sucesso.' });
    } catch (error) {
        console.error(`‚ùå Erro ao enviar mensagem para ${to}:`, error.message);
        // Verifica se o erro √© devido a um chat n√£o encontrado ou ID inv√°lido
        if (error.message.includes('No chat found')) {
            res.status(404).json({ success: false, error: 'Chat de destino n√£o encontrado ou inv√°lido.', details: error.message });
        } else {
            res.status(500).json({ success: false, error: 'Falha ao enviar mensagem.', details: error.message });
        }
    }
});

module.exports = router;
